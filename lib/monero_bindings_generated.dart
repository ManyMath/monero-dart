// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/monero.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class MoneroBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MoneroBindings(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MoneroBindings.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  /// Frees a C string allocated by this library
  ///
  /// # Safety
  /// Must only be called on strings allocated by this library's functions
  /// Must not be called more than once on the same pointer
  void free_string(ffi.Pointer<ffi.Char> ptr) {
    return _free_string(ptr);
  }

  late final _free_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
        'free_string',
      );
  late final _free_string = _free_stringPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  /// Generates a Monero address from a mnemonic
  ///
  /// # Arguments
  /// * `mnemonic` - C string containing the mnemonic phrase
  /// * `network` - Network type (0=Mainnet, 1=Testnet, 2=Stagenet)
  /// * `account` - Account index
  /// * `index` - Subaddress index (0 for primary address)
  ///
  /// # Returns
  /// Pointer to C string containing address (caller must free)
  /// Returns null on error
  ffi.Pointer<ffi.Char> generate_address(
    ffi.Pointer<ffi.Char> mnemonic,
    int network,
    int account,
    int index,
  ) {
    return _generate_address(mnemonic, network, account, index);
  }

  late final _generate_addressPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<ffi.Char>,
            ffi.Uint8,
            ffi.Uint32,
            ffi.Uint32,
          )
        >
      >('generate_address');
  late final _generate_address = _generate_addressPtr
      .asFunction<
        ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int, int, int)
      >();

  /// Generates a mnemonic in the specified language
  ///
  /// # Arguments
  /// * `language` - Language code (0=Chinese, 1=English, 2=Dutch, etc.)
  ///
  /// # Returns
  /// Pointer to C string containing mnemonic (caller must free)
  /// Returns null on error
  ffi.Pointer<ffi.Char> generate_mnemonic(int language) {
    return _generate_mnemonic(language);
  }

  late final _generate_mnemonicPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Uint8)>>(
        'generate_mnemonic',
      );
  late final _generate_mnemonic = _generate_mnemonicPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();
}
